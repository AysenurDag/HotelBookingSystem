# version kaldırıldı
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - microservices-network

  mssql:
    build:
      context: .
      dockerfile: mssql-tools.Dockerfile
    container_name: mssql
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=saUser.123
      - MSSQL_PID=Express
      - MSSQL_AUTHENTICATION_MODE=Mixed
    volumes:
      - mssql_data:/var/opt/mssql
      - ./mssql/init.sql:/init.sql
    networks:
      - microservices-network
 
  booking-db:
    image: mysql:8.0
    container_name: booking-db
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=booking_db
    ports:
      - "3307:3306"
    volumes:
      - booking_db_data:/var/lib/mysql
    networks:
      - microservices-network

  payment-db:
    image: postgres:15
    container_name: payment-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=payment_db
    ports:
      - "5433:5432"
    volumes:
      - payment_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  mongodb:
    image: mongo:latest
    container_name: hotel-db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network

  auth-user-service:
    build:
      context: ./auth-user-service
    container_name: auth-user-service
    ports:
      - "5045:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=mssql,1433;Database=AuthUserDb;User Id=LastUser;Password=Aut.Hen.Tication123!;TrustServerCertificate=True;
      - ConnectionStrings__RedisConnection=redis:6379
      - RabbitMq__HostName=rabbitmq
      - RabbitMq__QueueName=userQueue
      - AzureAd__Instance=https://login.microsoftonline.com/
      - AzureAd__Domain=hotelbookingext.onmicrosoft.com
      - AzureAd__TenantId=1649cae6-96a4-42a7-9f82-3e339752b193
      - AzureAd__ClientId=f6bc9acf-c194-4221-8145-2afc6775bd46
      - AzureAd__ClientSecret=Dxr8Q~TGqx_AadxPCzpHBWU3z-C5eyf~Vkdt_a_7
      - AzureAd__CallbackPath=/signin-oidc
      - AzureAd__Scopes=api://f6bc9acf-c194-4221-8145-2afc6775bd46/access_as_user
      - AzureAd__Audience=api://f6bc9acf-c194-4221-8145-2afc6775bd46
    depends_on:
      - redis
      - rabbitmq
    networks:
      - microservices-network

  api-gateway:
    build:
      context: ./ApiGateway
    container_name: api-gateway
    ports:
      - "5289:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - auth-user-service
    networks:
      - microservices-network

  booking-service:
    build:
      context: ./buse-booking-service
    container_name: booking-service
    depends_on:
      - booking-db
      - rabbitmq
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: default
    networks:
      - microservices-network

  payment-service:
    build: ./nigar-payment-service
    container_name: payment-service
    depends_on:
      - payment-db
      - rabbitmq
    ports:
      - "8082:8080"
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=payment-db;Port=5432;Database=payment_db;Username=postgres;Password=123456
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
    networks:
      - microservices-network

  hotel-service:
    build:
      context: ./hotel-service
      dockerfile: Dockerfile
    container_name: hotel-service
    ports:
      - "5050:5050"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/hotel_db
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      - mongodb
      - rabbitmq   
      - mssql
    networks:
      - microservices-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react-frontend-dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - microservices-network    
    jaeger:
      image: jaegertracing/all-in-one:1.51
      container_name: jaeger
      ports:
        - "16686:16686"   # Jaeger Web UI
        - "6831:6831/udp" # Agent (UDP)
        - "14250:14250"   # gRPC exporter için (bazı OpenTelemetry sürümleri bunu kullanır)
      networks:
        - microservices-network



networks:
  microservices-network:
    driver: bridge

volumes:
  booking_db_data:
  payment_db_data:
  mongodb_data:
  mssql_data:
  rabbitmq_data:
