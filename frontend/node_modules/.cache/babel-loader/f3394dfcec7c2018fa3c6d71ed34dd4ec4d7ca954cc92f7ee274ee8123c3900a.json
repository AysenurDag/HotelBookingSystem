{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_KEY;\nexport const searchHotels = async searchParams => {\n  try {\n    const queryParams = new URLSearchParams();\n    if (searchParams.city) {\n      queryParams.set('city', searchParams.city);\n    }\n    if (searchParams.country) {\n      queryParams.set('country', searchParams.country);\n    }\n    if (searchParams.rating) {\n      queryParams.set('rating', searchParams.rating);\n    }\n    if (searchParams.amenities && searchParams.amenities.length > 0) {\n      // Flask backend expects amenities as an array, so send each as separate\n      for (const amenity of searchParams.amenities) {\n        queryParams.append('amenities', amenity);\n      }\n    }\n    queryParams.set('page', searchParams.page || 1);\n    queryParams.set('per_page', searchParams.perPage || 10);\n    console.log(`Making request to: ${API_URL}/hotels/getHotels?${queryParams.toString()}`);\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 20000); // 20 second timeout\n\n    const response = await fetch(`${API_URL}/hotels/getHotels?${queryParams.toString()}`, {\n      signal: controller.signal,\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    clearTimeout(timeoutId);\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Request timed out');\n      throw new Error('The request timed out. The server might be busy or unavailable.');\n    }\n    console.error('Error searching hotels:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_KEY","searchHotels","searchParams","queryParams","URLSearchParams","city","set","country","rating","amenities","length","amenity","append","page","perPage","console","log","toString","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","mode","headers","clearTimeout","ok","Error","status","statusText","json","error","name"],"sources":["C:/Users/MahsunDaÄŸAtolla/Desktop/SchoolProjects/HotelBooking/HotelBookingSystem/frontend/src/services/hotelService.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_KEY;\r\n\r\nexport const searchHotels = async (searchParams) => {\r\n  try {\r\n    const queryParams = new URLSearchParams();\r\n\r\n    if (searchParams.city) {\r\n      queryParams.set('city', searchParams.city);\r\n    }\r\n\r\n    if (searchParams.country) {\r\n      queryParams.set('country', searchParams.country);\r\n    }\r\n\r\n    if (searchParams.rating) {\r\n      queryParams.set('rating', searchParams.rating);\r\n    }\r\n\r\n    if (searchParams.amenities && searchParams.amenities.length > 0) {\r\n      // Flask backend expects amenities as an array, so send each as separate\r\n      for (const amenity of searchParams.amenities) {\r\n        queryParams.append('amenities', amenity);\r\n      }\r\n    }\r\n\r\n    queryParams.set('page', searchParams.page || 1);\r\n    queryParams.set('per_page', searchParams.perPage || 10);\r\n\r\n    console.log(`Making request to: ${API_URL}/hotels/getHotels?${queryParams.toString()}`);\r\n\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 20000); // 20 second timeout\r\n\r\n    const response = await fetch(`${API_URL}/hotels/getHotels?${queryParams.toString()}`, {\r\n      signal: controller.signal,\r\n      mode: 'cors',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n      },\r\n    });\r\n\r\n    clearTimeout(timeoutId);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    if (error.name === 'AbortError') {\r\n      console.error('Request timed out');\r\n      throw new Error('The request timed out. The server might be busy or unavailable.');\r\n    }\r\n    console.error('Error searching hotels:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,MAAMC,YAAY,GAAG,MAAOC,YAAY,IAAK;EAClD,IAAI;IACF,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;IAEzC,IAAIF,YAAY,CAACG,IAAI,EAAE;MACrBF,WAAW,CAACG,GAAG,CAAC,MAAM,EAAEJ,YAAY,CAACG,IAAI,CAAC;IAC5C;IAEA,IAAIH,YAAY,CAACK,OAAO,EAAE;MACxBJ,WAAW,CAACG,GAAG,CAAC,SAAS,EAAEJ,YAAY,CAACK,OAAO,CAAC;IAClD;IAEA,IAAIL,YAAY,CAACM,MAAM,EAAE;MACvBL,WAAW,CAACG,GAAG,CAAC,QAAQ,EAAEJ,YAAY,CAACM,MAAM,CAAC;IAChD;IAEA,IAAIN,YAAY,CAACO,SAAS,IAAIP,YAAY,CAACO,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/D;MACA,KAAK,MAAMC,OAAO,IAAIT,YAAY,CAACO,SAAS,EAAE;QAC5CN,WAAW,CAACS,MAAM,CAAC,WAAW,EAAED,OAAO,CAAC;MAC1C;IACF;IAEAR,WAAW,CAACG,GAAG,CAAC,MAAM,EAAEJ,YAAY,CAACW,IAAI,IAAI,CAAC,CAAC;IAC/CV,WAAW,CAACG,GAAG,CAAC,UAAU,EAAEJ,YAAY,CAACY,OAAO,IAAI,EAAE,CAAC;IAEvDC,OAAO,CAACC,GAAG,CAAC,sBAAsBnB,OAAO,qBAAqBM,WAAW,CAACc,QAAQ,CAAC,CAAC,EAAE,CAAC;IAEvF,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAE/D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3B,OAAO,qBAAqBM,WAAW,CAACc,QAAQ,CAAC,CAAC,EAAE,EAAE;MACpFQ,MAAM,EAAEP,UAAU,CAACO,MAAM;MACzBC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;QACP,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;IAEFC,YAAY,CAACR,SAAS,CAAC;IAEvB,IAAI,CAACG,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,SAASP,QAAQ,CAACQ,MAAM,KAAKR,QAAQ,CAACS,UAAU,EAAE,CAAC;IACrE;IAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,IAAI,KAAK,YAAY,EAAE;MAC/BpB,OAAO,CAACmB,KAAK,CAAC,mBAAmB,CAAC;MAClC,MAAM,IAAIJ,KAAK,CAAC,iEAAiE,CAAC;IACpF;IACAf,OAAO,CAACmB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}