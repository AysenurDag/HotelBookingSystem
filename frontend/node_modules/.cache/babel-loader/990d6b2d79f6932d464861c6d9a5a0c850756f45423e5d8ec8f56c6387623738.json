{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useHotelSearch.js\nimport { useState, useEffect } from 'react';\nimport { searchHotels } from '../services/hotelService';\nconst useHotelSearch = initialSearchParams => {\n  _s();\n  const [searchParams, setSearchParams] = useState({\n    ...initialSearchParams,\n    page: 1,\n    perPage: 10\n  });\n  const [hotels, setHotels] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    perPage: 10,\n    total: 0\n  });\n\n  // Function to update search parameters\n  const updateSearch = newParams => {\n    // Reset to page 1 when search criteria changes\n    if (Object.keys(newParams).some(key => key !== 'page' && key !== 'perPage')) {\n      setSearchParams(prev => ({\n        ...prev,\n        ...newParams,\n        page: 1\n      }));\n    } else {\n      setSearchParams(prev => ({\n        ...prev,\n        ...newParams\n      }));\n    }\n  };\n\n  // Function to handle pagination\n  const goToPage = page => {\n    updateSearch({\n      page\n    });\n  };\n\n  // Fetch hotels when search parameters change\n  useEffect(() => {\n    const fetchHotels = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await searchHotels(searchParams);\n\n        // Extract data and pagination info from the response\n        const {\n          data,\n          meta\n        } = response;\n        setHotels(data || []);\n        setPagination({\n          page: (meta === null || meta === void 0 ? void 0 : meta.page) || 1,\n          perPage: (meta === null || meta === void 0 ? void 0 : meta.per_page) || 10,\n          total: (meta === null || meta === void 0 ? void 0 : meta.total) || 0\n        });\n      } catch (err) {\n        setError(err.message || 'Failed to fetch hotels');\n        setHotels([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchHotels();\n  }, [searchParams]);\n  return {\n    searchParams,\n    updateSearch,\n    hotels,\n    loading,\n    error,\n    pagination,\n    goToPage\n  };\n};\n_s(useHotelSearch, \"4QQInXnrcpHO2swqgQH01juQ3oY=\");\nexport default useHotelSearch;","map":{"version":3,"names":["useState","useEffect","searchHotels","useHotelSearch","initialSearchParams","_s","searchParams","setSearchParams","page","perPage","hotels","setHotels","loading","setLoading","error","setError","pagination","setPagination","total","updateSearch","newParams","Object","keys","some","key","prev","goToPage","fetchHotels","response","data","meta","per_page","err","message"],"sources":["C:/Users/ozge/Desktop/HotelBookingSystem/frontend/src/hooks/useHotelSearch.js"],"sourcesContent":["// src/hooks/useHotelSearch.js\r\nimport { useState, useEffect } from 'react';\r\nimport { searchHotels } from '../services/hotelService';\r\n\r\nconst useHotelSearch = (initialSearchParams) => {\r\n  const [searchParams, setSearchParams] = useState({\r\n    ...initialSearchParams,\r\n    page: 1,\r\n    perPage: 10\r\n  });\r\n  const [hotels, setHotels] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    perPage: 10,\r\n    total: 0\r\n  });\r\n\r\n  // Function to update search parameters\r\n  const updateSearch = (newParams) => {\r\n    // Reset to page 1 when search criteria changes\r\n    if (Object.keys(newParams).some(key => key !== 'page' && key !== 'perPage')) {\r\n      setSearchParams(prev => ({ ...prev, ...newParams, page: 1 }));\r\n    } else {\r\n      setSearchParams(prev => ({ ...prev, ...newParams }));\r\n    }\r\n  };\r\n\r\n  // Function to handle pagination\r\n  const goToPage = (page) => {\r\n    updateSearch({ page });\r\n  };\r\n\r\n  // Fetch hotels when search parameters change\r\n  useEffect(() => {\r\n    const fetchHotels = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const response = await searchHotels(searchParams);\r\n        \r\n        // Extract data and pagination info from the response\r\n        const { data, meta } = response;\r\n        \r\n        setHotels(data || []);\r\n        setPagination({\r\n          page: meta?.page || 1,\r\n          perPage: meta?.per_page || 10,\r\n          total: meta?.total || 0\r\n        });\r\n      } catch (err) {\r\n        setError(err.message || 'Failed to fetch hotels');\r\n        setHotels([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchHotels();\r\n  }, [searchParams]);\r\n\r\n  return {\r\n    searchParams,\r\n    updateSearch,\r\n    hotels,\r\n    loading,\r\n    error,\r\n    pagination,\r\n    goToPage\r\n  };\r\n};\r\n\r\nexport default useHotelSearch;"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,0BAA0B;AAEvD,MAAMC,cAAc,GAAIC,mBAAmB,IAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC;IAC/C,GAAGI,mBAAmB;IACtBI,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC;IAC3CQ,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,EAAE;IACXS,KAAK,EAAE;EACT,CAAC,CAAC;;EAEF;EACA,MAAMC,YAAY,GAAIC,SAAS,IAAK;IAClC;IACA,IAAIC,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,CAACG,IAAI,CAACC,GAAG,IAAIA,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,SAAS,CAAC,EAAE;MAC3EjB,eAAe,CAACkB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE,GAAGL,SAAS;QAAEZ,IAAI,EAAE;MAAE,CAAC,CAAC,CAAC;IAC/D,CAAC,MAAM;MACLD,eAAe,CAACkB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE,GAAGL;MAAU,CAAC,CAAC,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAMM,QAAQ,GAAIlB,IAAI,IAAK;IACzBW,YAAY,CAAC;MAAEX;IAAK,CAAC,CAAC;EACxB,CAAC;;EAED;EACAP,SAAS,CAAC,MAAM;IACd,MAAM0B,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9Bd,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,MAAMa,QAAQ,GAAG,MAAM1B,YAAY,CAACI,YAAY,CAAC;;QAEjD;QACA,MAAM;UAAEuB,IAAI;UAAEC;QAAK,CAAC,GAAGF,QAAQ;QAE/BjB,SAAS,CAACkB,IAAI,IAAI,EAAE,CAAC;QACrBZ,aAAa,CAAC;UACZT,IAAI,EAAE,CAAAsB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEtB,IAAI,KAAI,CAAC;UACrBC,OAAO,EAAE,CAAAqB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,QAAQ,KAAI,EAAE;UAC7Bb,KAAK,EAAE,CAAAY,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEZ,KAAK,KAAI;QACxB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOc,GAAG,EAAE;QACZjB,QAAQ,CAACiB,GAAG,CAACC,OAAO,IAAI,wBAAwB,CAAC;QACjDtB,SAAS,CAAC,EAAE,CAAC;MACf,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDc,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACrB,YAAY,CAAC,CAAC;EAElB,OAAO;IACLA,YAAY;IACZa,YAAY;IACZT,MAAM;IACNE,OAAO;IACPE,KAAK;IACLE,UAAU;IACVU;EACF,CAAC;AACH,CAAC;AAACrB,EAAA,CApEIF,cAAc;AAsEpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}